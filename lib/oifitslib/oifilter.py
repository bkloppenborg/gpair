# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
This module provides an object-oriented interface to the OIFITSlib
dataset filtering functionality. To filter a oifits.OiFits instance,
create an instance of the Filter class, make the appropriate
assignments to its data attributes, than pass the OiFits instance to
its apply() method (which returns a filtered version of the dataset).

>>> import oifits, oifilter
>>> o = oifits.OiFits('testdata.fits')
>>> f = oifilter.Filter()
>>> f.accept_t3amp = 0
>>> f.accept_t3phi = 0
>>> filtered = f.apply(o)
>>> print len(filtered.t3List)
0

Examples/tests of other Filter attributes:

>>> f = oifilter.Filter()
>>> f.arrname = 'COAST'
>>> print f.apply(o).arrayList[0].arrname
COAST
>>> f = oifilter.Filter()
>>> f.insname = 'COAST_NICMOS'
>>> print f.apply(o).wavelengthList[0].insname
COAST_NICMOS
>>> f = oifilter.Filter()
>>> f.target_id = 2
>>> print f.apply(o).numTargets
0
>>> f = oifilter.Filter()
>>> f.mjd_range = (51836.0, 51836.9590)
>>> print f.apply(o).vis2List[0].numrec
1
>>> f = oifilter.Filter()
>>> f.wave_range = (2.0e-6, 2.4e-6)
>>> filtered = f.apply(o)
>>> print len(filtered.visList) + len(filtered.vis2List) + len(filtered.t3List)
0
>>> f = oifilter.Filter()
>>> f.accept_vis = 0
>>> print len(f.apply(o).visList)
0
>>> f = oifilter.Filter()
>>> f.accept_vis2 = 0
>>> print len(f.apply(o).vis2List)
0

"""

import _oifilter
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _test():
  import doctest
  doctest.testmod()

if __name__ == '__main__':
  _test()

class Filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Filter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arrname"] = _oifilter.Filter_arrname_set
    __swig_getmethods__["arrname"] = _oifilter.Filter_arrname_get
    if _newclass:arrname = _swig_property(_oifilter.Filter_arrname_get, _oifilter.Filter_arrname_set)
    __swig_setmethods__["insname"] = _oifilter.Filter_insname_set
    __swig_getmethods__["insname"] = _oifilter.Filter_insname_get
    if _newclass:insname = _swig_property(_oifilter.Filter_insname_get, _oifilter.Filter_insname_set)
    __swig_setmethods__["target_id"] = _oifilter.Filter_target_id_set
    __swig_getmethods__["target_id"] = _oifilter.Filter_target_id_get
    if _newclass:target_id = _swig_property(_oifilter.Filter_target_id_get, _oifilter.Filter_target_id_set)
    __swig_setmethods__["mjd_range"] = _oifilter.Filter_mjd_range_set
    __swig_getmethods__["mjd_range"] = _oifilter.Filter_mjd_range_get
    if _newclass:mjd_range = _swig_property(_oifilter.Filter_mjd_range_get, _oifilter.Filter_mjd_range_set)
    __swig_setmethods__["wave_range"] = _oifilter.Filter_wave_range_set
    __swig_getmethods__["wave_range"] = _oifilter.Filter_wave_range_get
    if _newclass:wave_range = _swig_property(_oifilter.Filter_wave_range_get, _oifilter.Filter_wave_range_set)
    __swig_setmethods__["accept_vis"] = _oifilter.Filter_accept_vis_set
    __swig_getmethods__["accept_vis"] = _oifilter.Filter_accept_vis_get
    if _newclass:accept_vis = _swig_property(_oifilter.Filter_accept_vis_get, _oifilter.Filter_accept_vis_set)
    __swig_setmethods__["accept_vis2"] = _oifilter.Filter_accept_vis2_set
    __swig_getmethods__["accept_vis2"] = _oifilter.Filter_accept_vis2_get
    if _newclass:accept_vis2 = _swig_property(_oifilter.Filter_accept_vis2_get, _oifilter.Filter_accept_vis2_set)
    __swig_setmethods__["accept_t3amp"] = _oifilter.Filter_accept_t3amp_set
    __swig_getmethods__["accept_t3amp"] = _oifilter.Filter_accept_t3amp_get
    if _newclass:accept_t3amp = _swig_property(_oifilter.Filter_accept_t3amp_get, _oifilter.Filter_accept_t3amp_set)
    __swig_setmethods__["accept_t3phi"] = _oifilter.Filter_accept_t3phi_set
    __swig_getmethods__["accept_t3phi"] = _oifilter.Filter_accept_t3phi_get
    if _newclass:accept_t3phi = _swig_property(_oifilter.Filter_accept_t3phi_get, _oifilter.Filter_accept_t3phi_set)
    def __init__(self, *args): 
        this = _oifilter.new_Filter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _oifilter.delete_Filter
    __del__ = lambda self : None;
    def __str__(*args): return _oifilter.Filter___str__(*args)
    def apply(*args): return _oifilter.Filter_apply(*args)
Filter_swigregister = _oifilter.Filter_swigregister
Filter_swigregister(Filter)



