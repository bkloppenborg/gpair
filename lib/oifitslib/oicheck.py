# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
This module provides an interface to the OIFITSlib dataset checking
functions. A number of functions check_XXX() are provided, each of
which takes an oifits.OiFits instance and returns a tuple (level,
result) where level is an integer indicating the severity of any
breach of the OIFITS standard (see OI_BREACH_LEVEL in oicheck.h), and
result is a CheckResult instance. str(result) will return a
human-readable description of the result.

>>> import oifits
>>> from oicheck import *
>>> checks = [check_unique_targets, check_targets_present,
...           check_elements_present, check_flagging, check_t3amp,
...           check_waveorder]
>>> o = oifits.OiFits('bigtest2.fits')
>>> for c in checks:
...     level, result = c(o)
...     if level > 0:
...         print result

"""

import _oicheck
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _test():
  import doctest
  doctest.testmod()

if __name__ == '__main__':
  _test()

class CheckResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CheckResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["level"] = _oicheck.CheckResult_level_set
    __swig_getmethods__["level"] = _oicheck.CheckResult_level_get
    if _newclass:level = _swig_property(_oicheck.CheckResult_level_get, _oicheck.CheckResult_level_set)
    __swig_setmethods__["description"] = _oicheck.CheckResult_description_set
    __swig_getmethods__["description"] = _oicheck.CheckResult_description_get
    if _newclass:description = _swig_property(_oicheck.CheckResult_description_get, _oicheck.CheckResult_description_set)
    __swig_setmethods__["numBreach"] = _oicheck.CheckResult_numBreach_set
    __swig_getmethods__["numBreach"] = _oicheck.CheckResult_numBreach_get
    if _newclass:numBreach = _swig_property(_oicheck.CheckResult_numBreach_get, _oicheck.CheckResult_numBreach_set)
    __swig_destroy__ = _oicheck.delete_CheckResult
    __del__ = lambda self : None;
    def __str__(*args): return _oicheck.CheckResult___str__(*args)
    def __init__(self, *args): 
        this = _oicheck.new_CheckResult(*args)
        try: self.this.append(this)
        except: self.this = this
CheckResult_swigregister = _oicheck.CheckResult_swigregister
CheckResult_swigregister(CheckResult)

check_unique_targets = _oicheck.check_unique_targets
check_targets_present = _oicheck.check_targets_present
check_elements_present = _oicheck.check_elements_present
check_flagging = _oicheck.check_flagging
check_t3amp = _oicheck.check_t3amp
check_waveorder = _oicheck.check_waveorder


